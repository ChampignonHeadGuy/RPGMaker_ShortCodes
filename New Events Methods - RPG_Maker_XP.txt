#==============================================================================
# ** Game_Character (part 1)
#------------------------------------------------------------------------------
#  This class deals with characters. It's used as a superclass for the
#  Game_Player and Game_Event classes.
#==============================================================================

class Game_Character
  #--------------------------------------------------------------------------
  # * Object Initialization
  #--------------------------------------------------------------------------
  alias add_restorable_variables initialize
  def initialize
    add_restorable_variables
    @restore_character_name = ""
    @restore_character_hue = 0
  end
end

#==============================================================================
# ** Game_Event
#------------------------------------------------------------------------------
#  This class deals with events. It handles functions including event page 
#  switching via condition determinants, and running parallel process events.
#  It's used within the Game_Map class.
#==============================================================================

class Game_Event < Game_Character
  #--------------------------------------------------------------------------
  # * Public Instance Variables
  #--------------------------------------------------------------------------
  attr_reader   :trigger                  # trigger
  attr_reader   :list                     # list of event commands
  attr_reader   :starting                 # starting flag
  attr_reader   :count                    # internal time counter
  attr_reader   :variables                # internal values
  #--------------------------------------------------------------------------
  # * Object Initialization
  #     map_id : map ID
  #     event  : event (RPG::Event)
  #--------------------------------------------------------------------------
  def initialize(map_id, event)
    super()
    @map_id = map_id
    @event = event
    @id = @event.id
    @name = @event.name.clone
    @erased = false
    @starting = false
    @through = true
    # Make internal variables
    @count = 0
    @variables = [0]*8
    # Move to starting position
    moveto(@event.x, @event.y)
    refresh
  end
  #--------------------------------------------------------------------------
  # * Compare Substring Numeric Value
  #     number : numeric value
  #--------------------------------------------------------------------------
  def name_number_equal?(number)
    @name.gsub(/\[([0-9]+)\]/) do
      name_number = $1.to_i
      return (name_number == number)
    end
    # If no exist number to get on substring
    return false
  end
  #--------------------------------------------------------------------------
  # * Change Character to Game_Actor
  #--------------------------------------------------------------------------
  def sprite_from_actor
    @name.gsub(/\\[Nn]\[([0-9]+)\]/) do
      actor = $game_actors[$1.to_i]
      if actor != nil
        @character_name = actor.character_name
        @character_hue = actor.character_hue
        @shadow_name = actor.shadow_name
      end
    end
  end
  #--------------------------------------------------------------------------
  # * Change Character to Game_Actor With ID
  #     actor_id : actor ID
  #--------------------------------------------------------------------------
  def sprite_from_actor_id(actor_id)
    if actor_id.is_a?(Numeric)
      @name.gsub(/\\[Nn]\[([0-9]+)\]/) do
        actor = $game_actors[actor_id]
        if actor != nil
          @character_name = actor.character_name
          @character_hue = actor.character_hue
          @shadow_name = actor.shadow_name
        end
      end
    end
  end
  #--------------------------------------------------------------------------
  # * Change Character to Game_Party
  #--------------------------------------------------------------------------
  def sprite_from_party_actor
    @name.gsub(/\\[Nn][&]\[([0-9]+)\]/) do
      actor = $game_party.actors[$1.to_i]
      if actor != nil
        @character_name = actor.character_name
        @character_hue = actor.character_hue
        @shadow_name = actor.shadow_name
      end
    end
  end
  #--------------------------------------------------------------------------
  # * Restore Sprite
  #--------------------------------------------------------------------------
  def restore_sprite
    # Restore Sprite from first display of last event page
    @character_name = @restore_character_name
    @character_hue = @restore_character_hue
  end
  #--------------------------------------------------------------------------
  # * Clear Starting Flag
  #--------------------------------------------------------------------------
  def clear_starting
    @starting = false
  end
  #--------------------------------------------------------------------------
  # * Name
  #--------------------------------------------------------------------------
  def name
    return @name
  end
  #--------------------------------------------------------------------------
  # * Set Name
  #    name : name
  #--------------------------------------------------------------------------
  def name=(name)
    @name = name
  end
  #--------------------------------------------------------------------------
  # * Rename to Original Name
  #--------------------------------------------------------------------------
  def original_name
    @name = @event.name.clone
    return @name
  end
  #--------------------------------------------------------------------------
  # * Rename to Original Name but Refresh
  #--------------------------------------------------------------------------
  def refresh_name
    @name = @event.name.clone
    name_ajusts
  end
  #--------------------------------------------------------------------------
  # * Set time
  #     value : time
  #--------------------------------------------------------------------------
  def count=(value)
    if value.is_a?(Numeric)
      @count = value
    end
  end
  #--------------------------------------------------------------------------
  # * Determine if Over Trigger
  #    (whether or not same position is starting condition)
  #--------------------------------------------------------------------------
  def over_trigger?
    # If not through situation with character as graphic
    if @character_name != "" and not @through
      # Starting determinant is face
      return false
    end
    # If this position on the map is impassable
    unless $game_map.passable?(@x, @y, 0)
      # Starting determinant is face
      return false
    end
    # Starting determinant is same position
    return true
  end
  #--------------------------------------------------------------------------
  # * Start Event
  #--------------------------------------------------------------------------
  def start
    # If list of event commands is not empty
    if @list.size > 1
      @starting = true
    end
  end
  #--------------------------------------------------------------------------
  # * Temporarily Erase
  #--------------------------------------------------------------------------
  def erase
    @erased = true
    refresh
  end
  #--------------------------------------------------------------------------
  # * Refresh
  #--------------------------------------------------------------------------
  def refresh
    # Initialize local variable: new_page
    new_page = nil
    # If not temporarily erased
    unless @erased
      # Check in order of large event pages
      for page in @event.pages.reverse
        # Make possible referrence for event condition with c
        c = page.condition
        # Switch 1 condition confirmation
        if c.switch1_valid
          if $game_switches[c.switch1_id] == false
            next
          end
        end
        # Switch 2 condition confirmation
        if c.switch2_valid
          if $game_switches[c.switch2_id] == false
            next
          end
        end
        # Variable condition confirmation
        if c.variable_valid
          if $game_variables[c.variable_id] < c.variable_value
            next
          end
        end
        # Self switch condition confirmation
        if c.self_switch_valid
          key = [@map_id, @event.id, c.self_switch_ch]
          if $game_self_switches[key] != true
            next
          end
        end
        # Set local variable: new_page
        new_page = page
        # Remove loop
        break
      end
    end
    # If event page is the same as last time
    if new_page == @page
      # End method
      return
    end
    # Set @page as current event page
    @page = new_page
    # Clear starting flag
    clear_starting
    # If no page fulfills conditions
    if @page == nil
      # Set each instance variable
      @tile_id = 0
      @character_name = ""
      @character_hue = 0
      @restore_character_name = ""
      @restore_character_hue = 0
      @move_type = 0
      @through = true
      @trigger = nil
      @list = nil
      @interpreter = nil
      # End method
      return
    end
    # Set each instance variable
    @tile_id = @page.graphic.tile_id
    @character_name = @page.graphic.character_name
    @character_hue = @page.graphic.character_hue
    @restore_character_name = @page.graphic.character_name
    @restore_character_hue = @page.graphic.character_hue
    if @original_direction != @page.graphic.direction
      @direction = @page.graphic.direction
      @original_direction = @direction
      @prelock_direction = 0
    end
    if @original_pattern != @page.graphic.pattern
      @pattern = @page.graphic.pattern
      @original_pattern = @pattern
    end
    @opacity = @page.graphic.opacity
    @blend_type = @page.graphic.blend_type
    @move_type = @page.move_type
    @move_speed = @page.move_speed
    @move_frequency = @page.move_frequency
    @move_route = @page.move_route
    @move_route_index = 0
    @move_route_forcing = false
    @walk_anime = @page.walk_anime
    @step_anime = @page.step_anime
    @direction_fix = @page.direction_fix
    @through = @page.through
    @always_on_top = @page.always_on_top
    @trigger = @page.trigger
    @list = @page.list
    @interpreter = nil
    # If trigger is [parallel process]
    if @trigger == 4
      # Create parallel process interpreter
      @interpreter = Interpreter.new
    end
    # Auto event start determinant
    check_event_trigger_auto
  end
  #--------------------------------------------------------------------------
  # * Touch Event Starting Determinant
  #--------------------------------------------------------------------------
  def check_event_trigger_touch(x, y)
    # If event is running
    #if $event_interpreter.map.running?
    if $game_system.map_interpreter.running?
      return
    end
    # If trigger is [touch from event] and consistent with player coordinates
    if @trigger == 2 and x == $game_player.x and y == $game_player.y
      # If starting determinant other than jumping is front event
      if not jumping? and not over_trigger?
        start
      end
    end
  end
  #--------------------------------------------------------------------------
  # * Automatic Event Starting Determinant
  #--------------------------------------------------------------------------
  def check_event_trigger_auto
    # If trigger is [touch from event] and consistent with player coordinates
    if @trigger == 2 and @x == $game_player.x and @y == $game_player.y
      # If starting determinant other than jumping is same position event
      if not jumping? and over_trigger?
        start
      end
    end
    # If trigger is [auto run]
    if @trigger == 3
      start
    end
  end
  #--------------------------------------------------------------------------
  # * Set Variable Value
  #     id    : variable ID
  #     value : only numeric value
  #--------------------------------------------------------------------------
  def variables=(id, value)
    if id.is_a?(Numeric) and value.is_a?(Numeric)
      @variables[id] = [-9999999, [value, 9999999].min].max
    end
  end
  #--------------------------------------------------------------------------
  # * Update Internal Variables
  #--------------------------------------------------------------------------
  def update_variables
    if @count > 0
      @count -= 1
    end
    # Remove all values if is over of range
    if @variables.size > 8
      @variables.pop
    end
  end
  #--------------------------------------------------------------------------
  # * Frame Update
  #--------------------------------------------------------------------------
  def update
    super
    # Update internal variables
    update_variables
    # Automatic event starting determinant
    check_event_trigger_auto
    # If parallel process is valid
    if @interpreter != nil
      # If not running
      unless @interpreter.running?
        # Set up event
        @interpreter.setup(@list, @event.id)
      end
      # Update interpreter
      @interpreter.update
    end
  end
end

#==============================================================================
# ** Interpreter (part 8) (Events Change Sprites and Auto Call Global Objects)
#------------------------------------------------------------------------------
#  This interpreter runs event commands. This class is used within the
#  Game_System class and the Game_Event class.
#==============================================================================

class Interpreter
  #--------------------------------------------------------------------------
  # * Change Sprite of All Events: from
  #      actors character name
  #      actors character hue
  #--------------------------------------------------------------------------
  def characters_to_actors
    # Change all event sprites to actors character_name
    # Found with substring "\[Nn][actor_id]"
    for event in $game_map.events.values
      event.sprite_from_actor
    end
    # Continue
    return true
  end
  #--------------------------------------------------------------------------
  # * Change Sprite of Events: from
  #     actors character name
  #     actors character hue
  #     array : actors ID
  #--------------------------------------------------------------------------
  def characters_to_actors_ids(array)
    # Return if not is a array
    if not array.is_a?(Array)
      return
    end
    # Change all event sprites to actors character_name
    # Found with substring "\[Nn][actor_id]", but only has included on array
    for event in $game_map.events.values
      for i in array
        if event.name_number_equal?(i)
          event.sprite_from_actor_id(i)
        end
      end
    end
    # Continue
    return true
  end
  #--------------------------------------------------------------------------
  # * Change Sprite of All Events: from
  #      party actors character name
  #      party actors character hue
  #--------------------------------------------------------------------------
  def characters_to_party_actors
    # Change all event sprites to party actors character_name
    # Found with substring "\[Nn][&][actor_index]"
    for event in $game_map.events.values
      event.sprite_from_party_actor
    end
    # Continue
    return true
  end
  #--------------------------------------------------------------------------
  # * Restore Sprite of Events
  #--------------------------------------------------------------------------
  def restore_all_characters_sprite
    # Restore all event sprites
    for event in $game_map.events.values
      event.restore_sprite
    end
    # Continue
    return true
  end
  #--------------------------------------------------------------------------
  # * Restore Sprite of Events
  #     array : actors ID
  #--------------------------------------------------------------------------
  def restore_actors_sprite(array)
    # Return if not is a array
    if not array.is_a?(Array)
      return
    end
    # Change all event sprites to actors character_name
    # Found with substring "\[Nn][actor_id]", but only has included on array
    for event in $game_map.events.values
      for i in array
        if event.name_number_equal?(i)
          event.restore_sprite
        end
      end
    end
    # Continue
    return true
  end
  #--------------------------------------------------------------------------
  # * Auto Call Game_System
  #--------------------------------------------------------------------------
  def system
    return $game_system
  end
  #--------------------------------------------------------------------------
  # * Auto Call Game_Screen
  #--------------------------------------------------------------------------
  def screen
    return $game_screen
  end
  #--------------------------------------------------------------------------
  # * Auto Call Game_Party
  #--------------------------------------------------------------------------
  def party
    return $game_party
  end
  #--------------------------------------------------------------------------
  # * Auto Call Game_Player
  #--------------------------------------------------------------------------
  def player
    return $game_player
  end
  #--------------------------------------------------------------------------
  # * Auto Call Game_Troop
  #--------------------------------------------------------------------------
  def troop
    return $game_troop
  end
  #--------------------------------------------------------------------------
  # * Auto Call Main Game_Event
  #--------------------------------------------------------------------------
  def event
    return $game_map.events[@event_id]
  end
  #--------------------------------------------------------------------------
  # * Auto Call Main or Other Game_Event
  #--------------------------------------------------------------------------
  def main_event
    return get_character(0)
  end
end
